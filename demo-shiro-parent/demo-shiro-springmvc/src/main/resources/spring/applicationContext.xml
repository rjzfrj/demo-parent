<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache" 
      xmlns:context="http://www.springframework.org/schema/context" 
      xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:oxm="http://www.springframework.org/schema/oxm"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx" 
      xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" 
      xmlns:rabbit="http://www.springframework.org/schema/rabbit" 
      xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
      http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
      http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
      http://www.springframework.org/schema/rabbit 
          http://www.springframework.org/schema/rabbit/spring-rabbit.xsd 
          http://www.springframework.org/schema/beans 
          http://www.springframework.org/schema/beans/spring-beans.xsd"> 
                        
    <!-- 扫描com.allscore.wireless.biz.impl包里下的所有class文件，配置注解的类全都装入容器中进行管理 -->
    <!--context:component-scan base-package="com.allscore.sireless.biz.impl" /-->

    <!-- 引入配置文件 -->
  <!--   <context:property-placeholder location="classpath:config.properties" /> -->
    
     <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
    
    <!--创建jdbc数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!-- 配置事务管理  -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean> 
 
    <tx:annotation-driven transaction-manager="transactionManager" />
    
    <!-- 创建SqlSessionFactory，并指定数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:spring/mybatis-config.xml" />
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- Mapper文件扫描配置工具，Spring将自动扫描对应配置路径下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.allscore.wireless.dao" />
	</bean>
	
	  <!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射)  
    <mvc:view-controller path="/" view-name="forward:/index.jsp"/> --> 
   
    <bean id="myRealm" class="com.allscore.wireless.controller.MyRealm"/>  

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="myRealm"/>  
    </bean>  
              
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"/> 
    <!--  
        <property name="loginUrl" value="/index.jsp"/> 
         <property name="unauthorizedUrl" value="/"/> 
          <property name="filterChainDefinitions">  
            <value> 
                /user/login=anon  
                /seller/sellerInfo=authc
                /business/bsInfo=authc
                /business/czInfo=authc
                /business/xfInfo=authc
                /business/tkInfo=authc
                /business/jfInfo=authc
                /business/txInfo=authc
                /business/sellerPoolInfo=authc
                
                /finance/reviewFowd=authc
                /finance/batchFowd=authc
                /finance/sellerChkFowd=authc
                /finance/accManageFowd=authc
                
                /pos/posrkFowd=authc
                /pos/posckFowd=authc
                
                /sys/roleFowd=authc
                /sys/userFowd=authc
                
                /app/appFowd=authc

                
            </value>  
        </property>   
      -->   
       
    </bean> 
    
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  

   <import resource="classpath*:spring/wireless-biz.xml" />
   <import resource="classpath*:spring/dubboAndRabbit.xml" /> 
	
</beans>